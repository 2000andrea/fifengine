# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _fife
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class Exception(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Exception, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_Exception(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Exception
    __del__ = lambda self : None;
    def getMessage(*args): return _fife.Exception_getMessage(*args)
Exception_swigregister = _fife.Exception_swigregister
Exception_swigregister(Exception)

class SDLException(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDLException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SDLException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_SDLException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_SDLException
    __del__ = lambda self : None;
SDLException_swigregister = _fife.SDLException_swigregister
SDLException_swigregister(SDLException)

class NotFound(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotFound, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotFound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_NotFound(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_NotFound
    __del__ = lambda self : None;
NotFound_swigregister = _fife.NotFound_swigregister
NotFound_swigregister(NotFound)

class IndexOverflow(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexOverflow, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndexOverflow, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_IndexOverflow(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_IndexOverflow
    __del__ = lambda self : None;
IndexOverflow_swigregister = _fife.IndexOverflow_swigregister
IndexOverflow_swigregister(IndexOverflow)

class InvalidFormat(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidFormat, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidFormat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_InvalidFormat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_InvalidFormat
    __del__ = lambda self : None;
InvalidFormat_swigregister = _fife.InvalidFormat_swigregister
InvalidFormat_swigregister(InvalidFormat)

class CannotOpenFile(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CannotOpenFile, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CannotOpenFile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_CannotOpenFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_CannotOpenFile
    __del__ = lambda self : None;
CannotOpenFile_swigregister = _fife.CannotOpenFile_swigregister
CannotOpenFile_swigregister(CannotOpenFile)

class OutOfMemory(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutOfMemory, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutOfMemory, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_OutOfMemory(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_OutOfMemory
    __del__ = lambda self : None;
OutOfMemory_swigregister = _fife.OutOfMemory_swigregister
OutOfMemory_swigregister(OutOfMemory)

class InvalidConversion(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidConversion, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidConversion, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_InvalidConversion(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_InvalidConversion
    __del__ = lambda self : None;
InvalidConversion_swigregister = _fife.InvalidConversion_swigregister
InvalidConversion_swigregister(InvalidConversion)

class NotSupported(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotSupported, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotSupported, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_NotSupported(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_NotSupported
    __del__ = lambda self : None;
NotSupported_swigregister = _fife.NotSupported_swigregister
NotSupported_swigregister(NotSupported)

class NameClash(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NameClash, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NameClash, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_NameClash(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_NameClash
    __del__ = lambda self : None;
NameClash_swigregister = _fife.NameClash_swigregister
NameClash_swigregister(NameClash)

class Duplicate(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Duplicate, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Duplicate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_Duplicate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Duplicate
    __del__ = lambda self : None;
Duplicate_swigregister = _fife.Duplicate_swigregister
Duplicate_swigregister(Duplicate)

class ScriptException(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScriptException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScriptException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_ScriptException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_ScriptException
    __del__ = lambda self : None;
ScriptException_swigregister = _fife.ScriptException_swigregister
ScriptException_swigregister(ScriptException)

class EventException(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_EventException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_EventException
    __del__ = lambda self : None;
EventException_swigregister = _fife.EventException_swigregister
EventException_swigregister(EventException)

class SettingsManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettingsManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SettingsManager, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_SettingsManager(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_SettingsManager
    __del__ = lambda self : None;
    def loadSettings(*args): return _fife.SettingsManager_loadSettings(*args)
    def saveSettings(*args): return _fife.SettingsManager_saveSettings(*args)
    def read_int(*args): return _fife.SettingsManager_read_int(*args)
    def read_bool(*args): return _fife.SettingsManager_read_bool(*args)
    def read_string(*args): return _fife.SettingsManager_read_string(*args)
    def write_int(*args): return _fife.SettingsManager_write_int(*args)
    def write_bool(*args): return _fife.SettingsManager_write_bool(*args)
    def write_string(*args): return _fife.SettingsManager_write_string(*args)
SettingsManager_swigregister = _fife.SettingsManager_swigregister
SettingsManager_swigregister(SettingsManager)

class Log(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Log, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Log, name)
    __repr__ = _swig_repr
    LEVEL_MAX = _fife.Log_LEVEL_MAX
    LEVEL_DEBUG = _fife.Log_LEVEL_DEBUG
    LEVEL_LOG = _fife.Log_LEVEL_LOG
    LEVEL_WARN = _fife.Log_LEVEL_WARN
    def __init__(self, *args): 
        this = _fife.new_Log(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Log
    __del__ = lambda self : None;
    __swig_getmethods__["setLogLevel"] = lambda x: _fife.Log_setLogLevel
    if _newclass:setLogLevel = staticmethod(_fife.Log_setLogLevel)
    __swig_getmethods__["initialize"] = lambda x: _fife.Log_initialize
    if _newclass:initialize = staticmethod(_fife.Log_initialize)
Log_swigregister = _fife.Log_swigregister
Log_swigregister(Log)
Log_setLogLevel = _fife.Log_setLogLevel
Log_initialize = _fife.Log_initialize

class TimeManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeManager, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_TimeManager(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_TimeManager
    __del__ = lambda self : None;
    def update(*args): return _fife.TimeManager_update(*args)
    def getTime(*args): return _fife.TimeManager_getTime(*args)
    def getTimeDelta(*args): return _fife.TimeManager_getTimeDelta(*args)
    def getAverageFrameTime(*args): return _fife.TimeManager_getAverageFrameTime(*args)
    def printStatistics(*args): return _fife.TimeManager_printStatistics(*args)
    def registerEvent(*args): return _fife.TimeManager_registerEvent(*args)
    def unregisterEvent(*args): return _fife.TimeManager_unregisterEvent(*args)
TimeManager_swigregister = _fife.TimeManager_swigregister
TimeManager_swigregister(TimeManager)

class TimeEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeEvent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == TimeEvent:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fife.new_TimeEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_TimeEvent
    __del__ = lambda self : None;
    def updateEvent(*args): return _fife.TimeEvent_updateEvent(*args)
    def setPeriod(*args): return _fife.TimeEvent_setPeriod(*args)
    def getPeriod(*args): return _fife.TimeEvent_getPeriod(*args)
    def __disown__(self):
        self.this.disown()
        _fife.disown_TimeEvent(self)
        return weakref_proxy(self)
TimeEvent_swigregister = _fife.TimeEvent_swigregister
TimeEvent_swigregister(TimeEvent)

class Engine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Engine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Engine, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_Engine(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Engine
    __del__ = lambda self : None;
Engine_swigregister = _fife.Engine_swigregister
Engine_swigregister(Engine)



