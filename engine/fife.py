# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _fife
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class Exception(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Exception, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_Exception(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Exception
    __del__ = lambda self : None;
    def getMessage(*args): return _fife.Exception_getMessage(*args)
Exception_swigregister = _fife.Exception_swigregister
Exception_swigregister(Exception)

class SDLException(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDLException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SDLException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_SDLException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_SDLException
    __del__ = lambda self : None;
SDLException_swigregister = _fife.SDLException_swigregister
SDLException_swigregister(SDLException)

class NotFound(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotFound, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotFound, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_NotFound(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_NotFound
    __del__ = lambda self : None;
NotFound_swigregister = _fife.NotFound_swigregister
NotFound_swigregister(NotFound)

class IndexOverflow(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexOverflow, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndexOverflow, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_IndexOverflow(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_IndexOverflow
    __del__ = lambda self : None;
IndexOverflow_swigregister = _fife.IndexOverflow_swigregister
IndexOverflow_swigregister(IndexOverflow)

class InvalidFormat(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidFormat, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidFormat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_InvalidFormat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_InvalidFormat
    __del__ = lambda self : None;
InvalidFormat_swigregister = _fife.InvalidFormat_swigregister
InvalidFormat_swigregister(InvalidFormat)

class CannotOpenFile(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CannotOpenFile, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CannotOpenFile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_CannotOpenFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_CannotOpenFile
    __del__ = lambda self : None;
CannotOpenFile_swigregister = _fife.CannotOpenFile_swigregister
CannotOpenFile_swigregister(CannotOpenFile)

class OutOfMemory(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutOfMemory, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OutOfMemory, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_OutOfMemory(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_OutOfMemory
    __del__ = lambda self : None;
OutOfMemory_swigregister = _fife.OutOfMemory_swigregister
OutOfMemory_swigregister(OutOfMemory)

class InvalidConversion(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InvalidConversion, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InvalidConversion, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_InvalidConversion(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_InvalidConversion
    __del__ = lambda self : None;
InvalidConversion_swigregister = _fife.InvalidConversion_swigregister
InvalidConversion_swigregister(InvalidConversion)

class NotSupported(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NotSupported, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NotSupported, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_NotSupported(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_NotSupported
    __del__ = lambda self : None;
NotSupported_swigregister = _fife.NotSupported_swigregister
NotSupported_swigregister(NotSupported)

class NameClash(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NameClash, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NameClash, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_NameClash(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_NameClash
    __del__ = lambda self : None;
NameClash_swigregister = _fife.NameClash_swigregister
NameClash_swigregister(NameClash)

class Duplicate(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Duplicate, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Duplicate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_Duplicate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Duplicate
    __del__ = lambda self : None;
Duplicate_swigregister = _fife.Duplicate_swigregister
Duplicate_swigregister(Duplicate)

class ScriptException(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScriptException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScriptException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_ScriptException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_ScriptException
    __del__ = lambda self : None;
ScriptException_swigregister = _fife.ScriptException_swigregister
ScriptException_swigregister(ScriptException)

class EventException(Exception):
    __swig_setmethods__ = {}
    for _s in [Exception]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventException, name, value)
    __swig_getmethods__ = {}
    for _s in [Exception]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EventException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_EventException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_EventException
    __del__ = lambda self : None;
EventException_swigregister = _fife.EventException_swigregister
EventException_swigregister(EventException)

class SettingsManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SettingsManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SettingsManager, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_SettingsManager(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_SettingsManager
    __del__ = lambda self : None;
    def loadSettings(*args): return _fife.SettingsManager_loadSettings(*args)
    def saveSettings(*args): return _fife.SettingsManager_saveSettings(*args)
    def read_int(*args): return _fife.SettingsManager_read_int(*args)
    def read_bool(*args): return _fife.SettingsManager_read_bool(*args)
    def read_string(*args): return _fife.SettingsManager_read_string(*args)
    def write_int(*args): return _fife.SettingsManager_write_int(*args)
    def write_bool(*args): return _fife.SettingsManager_write_bool(*args)
    def write_string(*args): return _fife.SettingsManager_write_string(*args)
SettingsManager_swigregister = _fife.SettingsManager_swigregister
SettingsManager_swigregister(SettingsManager)

class Log(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Log, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Log, name)
    __repr__ = _swig_repr
    LEVEL_MAX = _fife.Log_LEVEL_MAX
    LEVEL_DEBUG = _fife.Log_LEVEL_DEBUG
    LEVEL_LOG = _fife.Log_LEVEL_LOG
    LEVEL_WARN = _fife.Log_LEVEL_WARN
    def __init__(self, *args): 
        this = _fife.new_Log(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Log
    __del__ = lambda self : None;
    __swig_getmethods__["setLogLevel"] = lambda x: _fife.Log_setLogLevel
    if _newclass:setLogLevel = staticmethod(_fife.Log_setLogLevel)
    __swig_getmethods__["initialize"] = lambda x: _fife.Log_initialize
    if _newclass:initialize = staticmethod(_fife.Log_initialize)
Log_swigregister = _fife.Log_swigregister
Log_swigregister(Log)
Log_setLogLevel = _fife.Log_setLogLevel
Log_initialize = _fife.Log_initialize

class TimeManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeManager, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_TimeManager(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_TimeManager
    __del__ = lambda self : None;
    def update(*args): return _fife.TimeManager_update(*args)
    def getTime(*args): return _fife.TimeManager_getTime(*args)
    def getTimeDelta(*args): return _fife.TimeManager_getTimeDelta(*args)
    def getAverageFrameTime(*args): return _fife.TimeManager_getAverageFrameTime(*args)
    def printStatistics(*args): return _fife.TimeManager_printStatistics(*args)
    def registerEvent(*args): return _fife.TimeManager_registerEvent(*args)
    def unregisterEvent(*args): return _fife.TimeManager_unregisterEvent(*args)
TimeManager_swigregister = _fife.TimeManager_swigregister
TimeManager_swigregister(TimeManager)

class TimeEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeEvent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == TimeEvent:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fife.new_TimeEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_TimeEvent
    __del__ = lambda self : None;
    def updateEvent(*args): return _fife.TimeEvent_updateEvent(*args)
    def setPeriod(*args): return _fife.TimeEvent_setPeriod(*args)
    def getPeriod(*args): return _fife.TimeEvent_getPeriod(*args)
    def __disown__(self):
        self.this.disown()
        _fife.disown_TimeEvent(self)
        return weakref_proxy(self)
TimeEvent_swigregister = _fife.TimeEvent_swigregister
TimeEvent_swigregister(TimeEvent)

ES_ENGINE = _fife.ES_ENGINE
ES_GUICHAN_WIDGET = _fife.ES_GUICHAN_WIDGET
ES_MAPVIEW = _fife.ES_MAPVIEW
CMD_UNKNOWN = _fife.CMD_UNKNOWN
CMD_GO_NORTH = _fife.CMD_GO_NORTH
CMD_GO_SOUTH = _fife.CMD_GO_SOUTH
CMD_GO_WEST = _fife.CMD_GO_WEST
CMD_GO_EAST = _fife.CMD_GO_EAST
CMD_GO_NORTH_EAST = _fife.CMD_GO_NORTH_EAST
CMD_GO_NORTH_WEST = _fife.CMD_GO_NORTH_WEST
CMD_GO_SOUTH_EAST = _fife.CMD_GO_SOUTH_EAST
CMD_GO_SOUTH_WEST = _fife.CMD_GO_SOUTH_WEST
CMD_TEST_TOGGLE_OBJECTS = _fife.CMD_TEST_TOGGLE_OBJECTS
CMD_TEST_TOGGLE_FLOOR = _fife.CMD_TEST_TOGGLE_FLOOR
CMD_TEST_TOGGLE_ROOF = _fife.CMD_TEST_TOGGLE_ROOF
CMD_TEST_TOGGLE_TILE_GRID = _fife.CMD_TEST_TOGGLE_TILE_GRID
CMD_TEST_TOGGLE_OBJ_GRID = _fife.CMD_TEST_TOGGLE_OBJ_GRID
CMD_TEST_CHANGE_ELEVATION = _fife.CMD_TEST_CHANGE_ELEVATION
CMD_TEST_INCREASE_ALPHA = _fife.CMD_TEST_INCREASE_ALPHA
CMD_TEST_DECREASE_ALPHA = _fife.CMD_TEST_DECREASE_ALPHA
CMD_TEST_TOGGLE_COORDS = _fife.CMD_TEST_TOGGLE_COORDS
CMD_TEST_TOGGLE_FADEOUT = _fife.CMD_TEST_TOGGLE_FADEOUT
CMD_TEST_SAVE = _fife.CMD_TEST_SAVE
CMD_MAKE_SCREENSHOT = _fife.CMD_MAKE_SCREENSHOT
CMD_QUIT_GAME = _fife.CMD_QUIT_GAME
class IKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IKey, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def isCharacter(*args): return _fife.IKey_isCharacter(*args)
    def isNumber(*args): return _fife.IKey_isNumber(*args)
    def isLetter(*args): return _fife.IKey_isLetter(*args)
    def getValue(*args): return _fife.IKey_getValue(*args)
    def getAsString(*args): return _fife.IKey_getAsString(*args)
    INVALID_KEY = _fife.IKey_INVALID_KEY
    SPACE = _fife.IKey_SPACE
    TAB = _fife.IKey_TAB
    ENTER = _fife.IKey_ENTER
    LEFT_ALT = _fife.IKey_LEFT_ALT
    RIGHT_ALT = _fife.IKey_RIGHT_ALT
    LEFT_SHIFT = _fife.IKey_LEFT_SHIFT
    RIGHT_SHIFT = _fife.IKey_RIGHT_SHIFT
    LEFT_CONTROL = _fife.IKey_LEFT_CONTROL
    RIGHT_CONTROL = _fife.IKey_RIGHT_CONTROL
    LEFT_META = _fife.IKey_LEFT_META
    RIGHT_META = _fife.IKey_RIGHT_META
    LEFT_SUPER = _fife.IKey_LEFT_SUPER
    RIGHT_SUPER = _fife.IKey_RIGHT_SUPER
    INSERT = _fife.IKey_INSERT
    HOME = _fife.IKey_HOME
    PAGE_UP = _fife.IKey_PAGE_UP
    DELETE = _fife.IKey_DELETE
    END = _fife.IKey_END
    PAGE_DOWN = _fife.IKey_PAGE_DOWN
    ESCAPE = _fife.IKey_ESCAPE
    CAPS_LOCK = _fife.IKey_CAPS_LOCK
    BACKSPACE = _fife.IKey_BACKSPACE
    F1 = _fife.IKey_F1
    F2 = _fife.IKey_F2
    F3 = _fife.IKey_F3
    F4 = _fife.IKey_F4
    F5 = _fife.IKey_F5
    F6 = _fife.IKey_F6
    F7 = _fife.IKey_F7
    F8 = _fife.IKey_F8
    F9 = _fife.IKey_F9
    F10 = _fife.IKey_F10
    F11 = _fife.IKey_F11
    F12 = _fife.IKey_F12
    F13 = _fife.IKey_F13
    F14 = _fife.IKey_F14
    F15 = _fife.IKey_F15
    PRINT_SCREEN = _fife.IKey_PRINT_SCREEN
    SCROLL_LOCK = _fife.IKey_SCROLL_LOCK
    PAUSE = _fife.IKey_PAUSE
    NUM_LOCK = _fife.IKey_NUM_LOCK
    ALT_GR = _fife.IKey_ALT_GR
    LEFT = _fife.IKey_LEFT
    RIGHT = _fife.IKey_RIGHT
    UP = _fife.IKey_UP
    DOWN = _fife.IKey_DOWN
    __swig_destroy__ = _fife.delete_IKey
    __del__ = lambda self : None;
IKey_swigregister = _fife.IKey_swigregister
IKey_swigregister(IKey)

class IEventSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IEventSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IEventSource, name)
    __repr__ = _swig_repr
    def getEventSourceType(*args): return _fife.IEventSource_getEventSourceType(*args)
    __swig_destroy__ = _fife.delete_IEventSource
    __del__ = lambda self : None;
    def __init__(self, *args): 
        if self.__class__ == IEventSource:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fife.new_IEventSource(*args)
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_IEventSource(self)
        return weakref_proxy(self)
IEventSource_swigregister = _fife.IEventSource_swigregister
IEventSource_swigregister(IEventSource)

class ICommand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICommand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICommand, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def getCommandType(*args): return _fife.ICommand_getCommandType(*args)
    def getCode(*args): return _fife.ICommand_getCode(*args)
    __swig_destroy__ = _fife.delete_ICommand
    __del__ = lambda self : None;
ICommand_swigregister = _fife.ICommand_swigregister
ICommand_swigregister(ICommand)

class Command(ICommand):
    __swig_setmethods__ = {}
    for _s in [ICommand]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Command, name, value)
    __swig_getmethods__ = {}
    for _s in [ICommand]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Command, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == Command:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fife.new_Command(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Command
    __del__ = lambda self : None;
    def getCommandType(*args): return _fife.Command_getCommandType(*args)
    def setCommandType(*args): return _fife.Command_setCommandType(*args)
    def getCode(*args): return _fife.Command_getCode(*args)
    def setCode(*args): return _fife.Command_setCode(*args)
    def consume(*args): return _fife.Command_consume(*args)
    def isConsumed(*args): return _fife.Command_isConsumed(*args)
    def getSource(*args): return _fife.Command_getSource(*args)
    def setSource(*args): return _fife.Command_setSource(*args)
    def getTimeStamp(*args): return _fife.Command_getTimeStamp(*args)
    def setTimeStamp(*args): return _fife.Command_setTimeStamp(*args)
    def getName(*args): return _fife.Command_getName(*args)
    def getDebugString(*args): return _fife.Command_getDebugString(*args)
    def __disown__(self):
        self.this.disown()
        _fife.disown_Command(self)
        return weakref_proxy(self)
Command_swigregister = _fife.Command_swigregister
Command_swigregister(Command)

class ICommandListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICommandListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICommandListener, name)
    __repr__ = _swig_repr
    def onCommand(*args): return _fife.ICommandListener_onCommand(*args)
    __swig_destroy__ = _fife.delete_ICommandListener
    __del__ = lambda self : None;
    def __init__(self, *args): 
        if self.__class__ == ICommandListener:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fife.new_ICommandListener(*args)
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_ICommandListener(self)
        return weakref_proxy(self)
ICommandListener_swigregister = _fife.ICommandListener_swigregister
ICommandListener_swigregister(ICommandListener)

class IKeyEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKeyEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IKeyEvent, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
IKeyEvent_swigregister = _fife.IKeyEvent_swigregister
IKeyEvent_swigregister(IKeyEvent)

class KeyEvent(IKeyEvent):
    __swig_setmethods__ = {}
    for _s in [IKeyEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [IKeyEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KeyEvent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_KeyEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_KeyEvent
    __del__ = lambda self : None;
    def getType(*args): return _fife.KeyEvent_getType(*args)
    def setType(*args): return _fife.KeyEvent_setType(*args)
    def isNumericPad(*args): return _fife.KeyEvent_isNumericPad(*args)
    def getKey(*args): return _fife.KeyEvent_getKey(*args)
    def isAltPressed(*args): return _fife.KeyEvent_isAltPressed(*args)
    def isControlPressed(*args): return _fife.KeyEvent_isControlPressed(*args)
    def isMetaPressed(*args): return _fife.KeyEvent_isMetaPressed(*args)
    def isShiftPressed(*args): return _fife.KeyEvent_isShiftPressed(*args)
    def consume(*args): return _fife.KeyEvent_consume(*args)
    def isConsumed(*args): return _fife.KeyEvent_isConsumed(*args)
    def getSource(*args): return _fife.KeyEvent_getSource(*args)
    def getTimeStamp(*args): return _fife.KeyEvent_getTimeStamp(*args)
    def getName(*args): return _fife.KeyEvent_getName(*args)
    def getDebugString(*args): return _fife.KeyEvent_getDebugString(*args)
KeyEvent_swigregister = _fife.KeyEvent_swigregister
KeyEvent_swigregister(KeyEvent)

class IKeyListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKeyListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IKeyListener, name)
    __repr__ = _swig_repr
    def keyPressed(*args): return _fife.IKeyListener_keyPressed(*args)
    def keyReleased(*args): return _fife.IKeyListener_keyReleased(*args)
    __swig_destroy__ = _fife.delete_IKeyListener
    __del__ = lambda self : None;
    def __init__(self, *args): 
        if self.__class__ == IKeyListener:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fife.new_IKeyListener(*args)
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_IKeyListener(self)
        return weakref_proxy(self)
IKeyListener_swigregister = _fife.IKeyListener_swigregister
IKeyListener_swigregister(IKeyListener)

class IMouseEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMouseEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMouseEvent, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
IMouseEvent_swigregister = _fife.IMouseEvent_swigregister
IMouseEvent_swigregister(IMouseEvent)

class MouseEvent(IMouseEvent):
    __swig_setmethods__ = {}
    for _s in [IMouseEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MouseEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [IMouseEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MouseEvent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_MouseEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_MouseEvent
    __del__ = lambda self : None;
    def getButton(*args): return _fife.MouseEvent_getButton(*args)
    def getType(*args): return _fife.MouseEvent_getType(*args)
    def getX(*args): return _fife.MouseEvent_getX(*args)
    def getY(*args): return _fife.MouseEvent_getY(*args)
    def isAltPressed(*args): return _fife.MouseEvent_isAltPressed(*args)
    def isControlPressed(*args): return _fife.MouseEvent_isControlPressed(*args)
    def isMetaPressed(*args): return _fife.MouseEvent_isMetaPressed(*args)
    def isShiftPressed(*args): return _fife.MouseEvent_isShiftPressed(*args)
    def consume(*args): return _fife.MouseEvent_consume(*args)
    def isConsumed(*args): return _fife.MouseEvent_isConsumed(*args)
    def getSource(*args): return _fife.MouseEvent_getSource(*args)
    def getTimeStamp(*args): return _fife.MouseEvent_getTimeStamp(*args)
    def getName(*args): return _fife.MouseEvent_getName(*args)
    def getDebugString(*args): return _fife.MouseEvent_getDebugString(*args)
MouseEvent_swigregister = _fife.MouseEvent_swigregister
MouseEvent_swigregister(MouseEvent)

class IMouseListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMouseListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMouseListener, name)
    __repr__ = _swig_repr
    def mouseEntered(*args): return _fife.IMouseListener_mouseEntered(*args)
    def mouseExited(*args): return _fife.IMouseListener_mouseExited(*args)
    def mousePressed(*args): return _fife.IMouseListener_mousePressed(*args)
    def mouseReleased(*args): return _fife.IMouseListener_mouseReleased(*args)
    def mouseClicked(*args): return _fife.IMouseListener_mouseClicked(*args)
    def mouseWheelMovedUp(*args): return _fife.IMouseListener_mouseWheelMovedUp(*args)
    def mouseWheelMovedDown(*args): return _fife.IMouseListener_mouseWheelMovedDown(*args)
    def mouseMoved(*args): return _fife.IMouseListener_mouseMoved(*args)
    def mouseDragged(*args): return _fife.IMouseListener_mouseDragged(*args)
    __swig_destroy__ = _fife.delete_IMouseListener
    __del__ = lambda self : None;
    def __init__(self, *args): 
        if self.__class__ == IMouseListener:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fife.new_IMouseListener(*args)
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_IMouseListener(self)
        return weakref_proxy(self)
IMouseListener_swigregister = _fife.IMouseListener_swigregister
IMouseListener_swigregister(IMouseListener)

class IWidgetEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IWidgetEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IWidgetEvent, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def getId(*args): return _fife.IWidgetEvent_getId(*args)
    __swig_destroy__ = _fife.delete_IWidgetEvent
    __del__ = lambda self : None;
IWidgetEvent_swigregister = _fife.IWidgetEvent_swigregister
IWidgetEvent_swigregister(IWidgetEvent)

class WidgetEvent(IWidgetEvent):
    __swig_setmethods__ = {}
    for _s in [IWidgetEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WidgetEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [IWidgetEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WidgetEvent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_WidgetEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_WidgetEvent
    __del__ = lambda self : None;
    def getId(*args): return _fife.WidgetEvent_getId(*args)
    def consume(*args): return _fife.WidgetEvent_consume(*args)
    def isConsumed(*args): return _fife.WidgetEvent_isConsumed(*args)
    def getSource(*args): return _fife.WidgetEvent_getSource(*args)
    def getTimeStamp(*args): return _fife.WidgetEvent_getTimeStamp(*args)
    def getName(*args): return _fife.WidgetEvent_getName(*args)
    def getDebugString(*args): return _fife.WidgetEvent_getDebugString(*args)
WidgetEvent_swigregister = _fife.WidgetEvent_swigregister
WidgetEvent_swigregister(WidgetEvent)

class IWidgetListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IWidgetListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IWidgetListener, name)
    __repr__ = _swig_repr
    def onWidgetAction(*args): return _fife.IWidgetListener_onWidgetAction(*args)
    __swig_destroy__ = _fife.delete_IWidgetListener
    __del__ = lambda self : None;
    def __init__(self, *args): 
        if self.__class__ == IWidgetListener:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _fife.new_IWidgetListener(*args)
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _fife.disown_IWidgetListener(self)
        return weakref_proxy(self)
IWidgetListener_swigregister = _fife.IWidgetListener_swigregister
IWidgetListener_swigregister(IWidgetListener)

class EventManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EventManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EventManager, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_EventManager(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_EventManager
    __del__ = lambda self : None;
    def addCommandListener(*args): return _fife.EventManager_addCommandListener(*args)
    def removeCommandListener(*args): return _fife.EventManager_removeCommandListener(*args)
    def addKeyListener(*args): return _fife.EventManager_addKeyListener(*args)
    def removeKeyListener(*args): return _fife.EventManager_removeKeyListener(*args)
    def addMouseListener(*args): return _fife.EventManager_addMouseListener(*args)
    def removeMouseListener(*args): return _fife.EventManager_removeMouseListener(*args)
    def addWidgetListener(*args): return _fife.EventManager_addWidgetListener(*args)
    def removeWidgetListener(*args): return _fife.EventManager_removeWidgetListener(*args)
    def getEventSourceType(*args): return _fife.EventManager_getEventSourceType(*args)
    def dispatchCommand(*args): return _fife.EventManager_dispatchCommand(*args)
    def processEvents(*args): return _fife.EventManager_processEvents(*args)
EventManager_swigregister = _fife.EventManager_swigregister
EventManager_swigregister(EventManager)

class Engine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Engine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Engine, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fife.new_Engine(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fife.delete_Engine
    __del__ = lambda self : None;
Engine_swigregister = _fife.Engine_swigregister
Engine_swigregister(Engine)



