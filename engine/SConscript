import os, sys

Import('env')

our_config_name = 'SFConfig'

def get_files(expected, path, names):
	# Check if this folder is included for the current build
	for (k, v) in expected.items():
		if env[k] != v:
			return []

	# It passes the filter, so use all cpp files.
	return [os.path.join(path, x) for x in names if (x.endswith('.cpp') or x.endswith('.h'))]

def get_filter(path, names):
	if our_config_name not in names: return {'lite': 0}

	try:
		x = file(os.path.join(path, our_config_name), 'ru')
		return eval(x.read())
	finally:
		x.close()

# Create the file list
files = []
for entry in os.walk('.'): #, False <-- for bottom-up. Do we want that?
	path = entry[0]
	if '.svn' in path: continue # skip versioning info folders
	names = entry[2]
	
	if 'SConscript' in names and path != '.': 
		# Use the custom script for that folder - don't recurse current script!
		files += SConscript(os.path.join(path, 'SConscript'))
	else:
		# Otherwise, conditionally use the folder. By default, use for non-lite build;
		# a simple 'SConfig' file can override that.
		files += get_files(get_filter(path, names), path, names)
cppfiles = [f for f in files if f.endswith('cpp')]

# ------------- msvc file list creation begin ----------------
def create_dict_tree(source_dict):
	for f in source_dict.keys():
		parts = f.split(os.path.sep, 1)
		if len(parts) > 1:
			try:
				source_dict[parts[0]][parts[1]] = {}
			except KeyError:
				source_dict[parts[0]] = {}
				source_dict[parts[0]][parts[1]] = {}
			del source_dict[f]
	for k, d in source_dict.items():
		create_dict_tree(d)
	return source_dict

def get_msvc_repr(d, tabcount=2, curpath=''):
	retstr = []
	for k in sorted(d.keys()):
		newpath = os.path.join(curpath, k)
		if len(d[k].keys()):
			retstr.append(tabcount * '\t' + '<Filter Name="%s">' % k)
			retstr.append(get_msvc_repr(d[k], tabcount+1, newpath))
			retstr.append(tabcount * '\t' + '</Filter>')
		else:
			newpath = os.path.join('..', '..', '..', 'engine', newpath)
			retstr.append(tabcount * '\t' + '<File RelativePath="%s"></File>' % newpath)
	return '\n'.join(retstr)

		
if env['msvcproj']:
	_jp = os.path.join
	_sep = os.path.sep
	msvcbuildpath = _jp('..', 'build', 'win32', 'msvc2005')
	vcpaths = [os.path.abspath(f).split('%sengine%s' % (_sep, _sep), 1)[1] for f in files]
	xmlstr = get_msvc_repr(create_dict_tree(dict([[p, {}] for p in vcpaths])))
	projtxt = open(_jp(msvcbuildpath, 'fifeproj_template.xml'), 'r').read()
	projtxt = projtxt.replace('__FILE_INSERTION_POINT__', xmlstr)
	vcprojfilename = _jp(msvcbuildpath, 'fife.vcproj')
	open(vcprojfilename, 'w').write(projtxt)
	print "FIFE msvc project file succesfully created (%s)" % os.path.abspath(vcprojfilename)
# ------------- msvc file list creation end ----------------

# Exceptions:
# audio - only in full BUT special handling <-- in audio/, just do the CPPPATH 
# logic; in subfolders, use a config that requires lite=0 AND the appropriate
# audio setting (0 in devnull, 1 in openAL)
# map/loaders - /xml only if env['xmlmap']; otherwise everything. Lite too!
# video - similarly, /renderbackends/opengl only if env['opengl']; otherwise
# everything. Lite too!
# vfs - main folder, don't use vfswriteformat.cpp for lite, but use everything
# else. raw/ is only for full
# tinyxml - only if full AND env['tinyxml']

env.Append(CPPPATH = ['#/engine'])

cppfiles.remove(os.path.join('.', 'main.cpp'))
if not env['msvcproj']:
	if env['lite']:
		env.StaticLibrary('fifelite', cppfiles)
	else:
		env.StaticLibrary('fife', cppfiles)
	
# vim: set filetype=python :
