# Build worker image (VM template)
image: Visual Studio 2015

# scripts that are called at very beginning, before repo cloning
init:
  - date /T & time /T
  - git config --global core.autocrlf input
  - cmake --version
  # go to hell Xamarin (see http://help.appveyor.com/discussions/problems/4569)
  - del "C:\Program Files (x86)\MSBuild\14.0\Microsoft.Common.targets\ImportAfter\Xamarin.Common.targets"
  # Set "build version number" to "short-commit-hash" or when tagged to "tag name" (Travis style)
  - ps: >-
      if ($env:APPVEYOR_REPO_TAG -eq "true")
      {
        Update-AppveyorBuild -Version "$env:APPVEYOR_REPO_TAG_NAME"
      }
      else
      {
        Update-AppveyorBuild -Version "dev-$($env:APPVEYOR_REPO_COMMIT.substring(0,7))"
      }
  # There are multiple pre-installed versions of Python on Appveyor
  # see https://www.appveyor.com/docs/installed-software/#python
  - "SET PATH=C:\\Python35;C:\\Python35\\Scripts;%PATH%"
  # Show version and architecture for Python
  - "%PYTHON%\\python.exe --version"
  - "%PYTHON%\\python.exe -c \"import struct; print(struct.calcsize('P') * 8)\""

branches:
  only:
  - master

clone_depth: 5

version: '{build}'

platform:
  - x86

configuration:
  - Release
  #- Debug

environment:
  matrix:
    - generator: "Visual Studio 14"        
    #- generator: "MinGW Makefiles"

matrix:
  fast_finish: true

cache:
  - C:\projects\fifengine-dependencies\downloads
#  - C:\projects\fifengine-dependencies\includes

install:
  # set path to boost according to compiler toolchain
  - if "%generator%" == "Visual Studio 14" (SET boost_root=C:\Libraries\boost_1_59_0)
  - if "%generator%" == "Visual Studio 14" (SET boost_librarydir=C:\Libraries\boost_1_59_0\lib32-msvc-14.0)
  # get dependencies
  - cmake dependencies -G "%generator%" -B../fifengine-dependencies/build
  - cmake --build ../fifengine-dependencies/build --target ALL_BUILD --config %configuration% 
  # show dependency folders
  - dir ..\fifengine-dependencies
  - dir ..\fifengine-dependencies\downloads
  - dir ..\fifengine-dependencies\includes /s
  
#before_build:
  # git sh.exe conflicts with MinGW makefiles
  #- if "%generator%"=="MinGW Makefiles" (set "PATH=%PATH:C:\Program Files\Git\usr\bin;=%")

build_script:
  - dir
  # create folder for an out-of-source-tree build: "c:\projects\build"
  - cd.. 
  - mkdir build
  - cd build
  # generate build script
  - >
    cmake ..\fifengine 
    -G "%generator%" 
    -DCMAKE_BUILD_TYPE=%configuration% 
    -DCMAKE_INSTALL_PREFIX="c:/fife/install" 
    -DBOOST_ROOT="%boost_root%" 
    -DBOOST_LIBRARYDIR="%boost_librarydir%" 
  # build
  - cmake --build . --target ALL_BUILD --config %configuration% 

after_build:
  - dir c:\fife\install /s

artifacts:
  - path: '\*.zip'
    name: ReleaseArtifact

# deploy to Github Releases on tag push
deploy:
  provider: GitHub
  release: 'Fifengine $(APPVEYOR_REPO_TAG_NAME)'
  tag: $(APPVEYOR_REPO_TAG_NAME)
  description: '[**Changelog**](https://github.com/fifengine/fifengine/blob/master/CHANGELOG.md)'
  artifact: ReleaseArtifact
  draft: false
  prerelease: false
  on:
    branch: master                 # release from master branch only
    appveyor_repo_tag: true        # deploy on tag push only
  auth_token:                      # encrypted token from GitHub
    secure: CAk9K6hUe6pEb6RFG5A49s790UFJibphWpeRsCm2itrxS1KDn1jTmwObE4/cyL/H